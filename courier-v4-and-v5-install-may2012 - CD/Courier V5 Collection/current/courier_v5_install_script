#!/bin/bash

# This script will install the necessary compoents for ISEEU Global Courier.


# Script Change Control:
#     24/05/12 - TJD - Initial version 5 script which has been adapted from the rewritten courier_v4_install_script.
#     31/05/12 - TJD - Added the syscom deamon functions to the script and finalised runtime.


# Software Versions Used in this Script
#     Operating System    - Red Hat Linux Enterprise Server 6.2
#     Apache HTTP Version - 2.2.22
#     PHP Version         - 5.3.13
#     Courier Version     - 5.0
#     IonCube Software    - 5.3


# Variables Used in this Script
# dnsname      = This is the DNS or FQDN name that Courier will use for certificates and external URL's
# configanswer = This is used to break out of the script if 'n' is chosen to not edit config files.
# rebootanswer = This is another yes or no request to choose to reboot the server now or not.


# The following code is the main installation script with notes for each section.


# First we check if the user is root:
if [ $(id -u) !=0]; then
     echo "You must be root to run this script" >&2
     exit 1
fi
clear

# We set a new LUKS disk encryption password:
echo "Add default ISEEU Global LUKS Key - at prompt type existing password first."
cryptsetup luksAddKey /dev/sda2
cryptsetup luksDump /dev/sda2
echo
echo

# We need to install an additional software package for Courier V5 so we do this first:
echo "Next the script will install the Courier V5 specific system software required."
yum install xinetd
service xinetd start
echo
echo

# Entering the servers DNS name for later use:
echo "Please enter the server's DNS host name: "
read dnsname
echo
echo

# Start, configure and secure MySQL Database:
echo "Now starting and configuring mySQL"
chkconfig --level 2345 mysqld on
service mysqld start
/usr/bin/mysql_secure_installation
echo
echo

# Unpack the files required for installation and ensure correct permissions:
read -p "Next the script will move source files and unpack them - press return to continue"
cd /home/iseeuglobal/Desktop/current/code
cp httpd-2.2.22.tar.bz2 php-5.3.13.tar.bz2 /usr/local/src
cd ..
cd config_files
cp config.layout /usr/local/src
cd /usr/local/src
chmod 777 *
chown root:root *
tar -xjvf httpd-2.2.22.tar.bz2 
tar -xjvf php-5.3.13.tar.bz2
echo
echo

# Compile, install and configure Apache and MySQL - This can take some time:
read -p "Next the script will compile, install and configure Apache and MySQL - press return to continue"
cd /usr/local/src
cp config.layout ./httpd-2.2.22
cd httpd-2.2.22
./configure --enable-layout=TJD --with-mpm=prefork --enable-modules="rewrite so ssl speling"
make
make install
cd ../php-5.3.13
./configure --with-apxs2=/usr/sbin/apxs --with-mysql=/usr --with-zlib-dir=/usr
make
make install
cd /home/iseeuglobal/Desktop/current
cd config_files
cp php.ini /usr/local/lib/php.ini
chown root:root /usr/local/lib/php.ini
chmod 644 /usr/local/lib/php.ini
echo
echo

# Unpack the Courier code and clean up:
read -p "Next the script will move and unpack the Courier code - press return to continue"
cd /home/iseeuglobal/Desktop/current/code
cp courier50.tar /home/httpd/htdocs
cd /home/httpd/htdocs
tar -xvf courier50.tar
rm courier50.tar
echo
echo

# Now we install the default database with pre-set configuration:
read -p "Next the script will create the blank database. When prompted enter MySQL password - press return to continue"
cd /home/iseeuglobal/Desktop/current/config_files
mysql -uroot -p < courier50.sql
echo
echo

# Create the necessary directories for the system to use as upload storage:
read -p "Next the script will create the required directories - press return to continue"
mkdir /home/upload
mkdir /home/upload/courier50
mkdir /home/upload/courier50/prestaged
mkdir /home/upload/courier50/tmp
mkdir /home/upload/courier50/usys
chown nobody:nobody /home/upload/courier50
chown nobody:nobody /home/upload/courier50/prestaged
chown nobody:nobody /home/upload/courier50/tmp
chown nobody:nobody /home/upload/courier50/usys
chmod 750 /home/upload/courier50
chmod 750 /home/upload/courier50/prestaged
chmod 750 /home/upload/courier50/tmp
chmod 750 /home/upload/courier50/usys
echo
echo

# Ensure the cleanup scripts are installed and default configuration files in place:
read -p "Next the script will copy all required configuration files - press return to continue"
cd /home/httpd/htdocs/sys
mkdir /usr/local/include/iseeu
mv localcfg.inc /usr/local/include/iseeu
cd /usr/local/include/iseeu
chown root:nobody localcfg.inc
chmod 640 localcfg.inc
cd /home/httpd/htdocs/sys
mv arc_courier5.php /etc/cron.daily
cd /etc/cron.daily
chown root:root arc_courier5.php
chmod 755 arc_courier5.php
cd /home/iseeuglobal/Desktop/current/config_files
cp httpd.conf /etc/httpd
cp httpd-ssl.conf /etc/httpd/extra
cp comodo.ca-bundle /etc/httpd/extra
chmod 644 /etc/httpd/extra/comodo.ca-bundle
echo
echo

# Install the Courier command server and configure services to accept the service:
cd /home/httpd/htdocs/sys
mv syscom /etc/xinetd.d
cd /etc/xinetd.d
chown root:root syscom
chmod 644 syscom
cd /home/httpd/htdocs/sys
mv cks.php /usr/local/bin
mv lgv.php /usr/local/bin
mv mlq.php /usr/local/bin
mv ssl.php /usr/local/bin
mv syscom.sh /usr/local/bin
cd /usr/local/bin
chown root:root cks.php
chown root:root lgv.php
chown root:root mlq.php
chown root:root ssl.php
chown root:root syscom.sh
chmod 700 cks.php
chmod 700 lgv.php
chmod 700 mlq.php
chmod 700 ssl.php
chmod 700 syscom.sh
cd /etc
cat /home/iseeuglobal/Desktop/current/config_files/services.txt >> services

# Begin SSL required configuration by creating a secure server key file:
read -p "Next the script will create a server key file - press return to continue"
mkdir /etc/httpd/ssl.key
cd /etc/httpd/ssl.key
openssl genrsa 2048 > $dnsname.key
chmod 400 $dnsname.key
echo
echo

# Using the server key file create a certificate signing request file:
read -p "Next the script will create a certificate signing request file - press return to continue"
mkdir /etc/httpd/ssl.csr
cd /etc/httpd/ssl.csr
openssl req -new -key /etc/httpd/ssl.key/$dnsname.key -out $dnsname.csr
openssl req -noout -text -in $dnsname.csr
cat $dnsname.csr
echo
echo

# From the certificate signing request file and using the server key generate a self-signed temporary certificate:
read -p "Next the server will generate a temp self signed certificate valid for 365 days - press return to continue"
mkdir /etc/httpd/ssl.crt
cd /etc/httpd/ssl.crt
openssl x509 -req -days 365 -in /etc/httpd/ssl.csr/$dnsname.csr -signkey /etc/httpd/ssl.key/$dnsname.key -out $dnsname.crt

# Notify system installer to remember the files needed for use later during config file editing:
echo "When editing the httpd-ssl.conf file to use the following names and paths: (may be a good idea to write these down)"
echo /usr/httpd/ssl.key/$dnsname.key
echo /usr/httpd/ssl.crt/$dnsname.crt
echo
echo

# To make sure files can be read by PHP ensure IonCube decoder installed:
read -p "Next the script will install the IonCube Software as required - press return to continue"
mkdir /usr/local/ioncube
cp /home/iseeuglobal/Desktop/current/config_files/ioncube_loader_lin_5.3.so /usr/local/ioncube/.
echo
echo

# GPG keys are used to secure the Gridcards in transit. Install default keys into system:
read -p "Next the script will install the necessary GPG keys for gridcard upload - press return to continue"
cd /home/httpd
gpg --homedir /home/httpd/.gnupg --import /home/iseeuglobal/Desktop/current/config_files/gridcard.key
chown -R nobody:nobody .gnupg
chmod -R 400 .gnupg
chmod 500 .gnupg
echo
echo

# The script uninstalls various services and checks others are not installed. Errors appear here are normal:
read -p "Next the script will stop un-necessary services and clean up - press return to continue"
cd /home/iseeuglobal/Desktop/current/cleanup_scripts/
chmod 777 buffy-edited
./buffy-edited 
cd /etc/init.d
chmod 755 httpd
cd /usr/local/src
rm -rf *
echo
echo

# The script will now prompt the installer to modify the site specific configuration scripts:
clear
echo "The installation is now complete.  The following configuration files need to be edited before the application will operate correctly - see build notes for further information:"
echo
echo "ISEEU Global Courier Configuration - /usr/local/include/iseeu/localcfg.inc"
echo "SSL Certificate Configuration File - /etc/httpd/extra/httpd-ssl.conf"
echo "Logwatch Configuration File - /usr/share/logwatch/default.conf/logwatch.conf"
echo
echo
read -p "To start the site specific configuration - press return to continue"

# The script opens the 3 site specific server config files for editing in vim:
read -p "Next the script will open the Courier configuration file for you to edit - press return to continue"
vim /usr/local/include/iseeu/localcfg.inc
echo
echo
read -p "Next the script will open the SSL config for editing names - press return to continue"
vim /etc/httpd/extra/httpd-ssl.conf
echo
echo
read -p "Next the script will open the Logwatch configuration file - press return to continue"
vim /usr/share/logwatch/default.conf/logwatch.conf
echo
echo

# The installer is prompted to reboot which is required before the system will operate:
clear
echo "The installation is now complete. DON'T FORGET TO OBFUSCATE THE LOCALCFG.INC FILE. The server will need to reboot before it will operate correctly.  Would you like to reboot the server now? y/n"
read rebootanswer
if [ $rebootanswer = n ]; then exit 0
fi
shutdown -r now

# Although this exit 0 is never executed it is here for the script to be correct.
exit 0
